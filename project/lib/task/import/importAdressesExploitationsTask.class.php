<?php

class importAdresseExploitationTask extends sfBaseTask
{

    CONST LINE_ID = 0;
    CONST LINE_CVI = 1;
    CONST LINE_INTITULE = 3;
    CONST LINE_ADRESSE = 5;
    CONST LINE_COMMUNE = 7;
    CONST LINE_CODEPOSTAL = 9;

    protected function configure()
    {
        $this->addArguments(array(
            new sfCommandArgument('file_path', sfCommandArgument::REQUIRED, "Fichier csv pour l'import")
        ));

        $this->addOptions(array(
            new sfCommandOption('application', null, sfCommandOption::PARAMETER_REQUIRED, 'The application name'),
            new sfCommandOption('env', null, sfCommandOption::PARAMETER_REQUIRED, 'The environment', 'dev'),
            new sfCommandOption('connection', null, sfCommandOption::PARAMETER_REQUIRED, 'The connection name', 'default'),
        ));

        $this->namespace = 'import';
        $this->name = 'adresses-exploitations';
        $this->briefDescription = "Reprise des adresses d'exploitations";
        $this->detailedDescription = <<<EOF
EOF;
    }

    protected function execute($arguments = array(), $options = array())
    {
        // initialize the database connection
        $databaseManager = new sfDatabaseManager($this->configuration);
        $connection = $databaseManager->getDatabase($options['connection'])->getConnection();
        $routing = clone ProjectConfiguration::getAppRouting();
        $contextInstance = sfContext::createInstance($this->configuration);
        $contextInstance->set('routing', $routing);

        $file_path = $arguments['file_path'];
        if(!$file_path){
          throw new  sfException("Le paramètre du fichier csv doit être renseigné");

        }
        error_reporting(E_ERROR | E_PARSE);

        foreach(file($file_path) as $line) {
            $line = str_replace("\n", "", $line);
            if(preg_match("/^(id repris;|;;;;;)/", $line)) {
                continue;
            }

            $data = str_getcsv($line, ';');

            try{
                $this->importAdresseExploitationLine($data);
            } catch (Exception $e) {

                echo sprintf("ERROR;%s;#LINE;%s\n", $e->getMessage(), $line);
                $doc = null;
                continue;
            }
        }
    }

    protected function importAdresseExploitationLine($dataLine){
      $idSociete = sprintf("%06d",$dataLine[self::LINE_ID]);
      $societe = SocieteClient::getInstance()->find($idSociete);
      if(!$societe){
        echo "Societe ".$idSociete." n'a pas été trouvé dans la base\n";
        return;
      }
      if(!count($societe->getEtablissementsObj())){
          echo "Societe ".$idSociete." n'a pas d'établissement création ";
          $etb = $societe->createEtablissement(EtablissementFamilles::FAMILLE_PRODUCTEUR);
          $etb->nom = $societe->raison_sociale;
          $etb->cvi = trim($dataLine[self::LINE_CVI]);
          $etb->save();
          return $this->importAdresse($dataLine,$etb);
      }
      if(count($societe->getEtablissementsObj()) == 1){
          foreach ($societe->getEtablissementsObj() as $key => $etb) {
          echo "traitement ".$etb->etablissement->_id." ";
          return $this->importAdresse($dataLine,$etb->etablissement);
          return;
          }
      }else{
        $etablissementToWrite = null;
        foreach ($societe->getEtablissementsObj() as $key => $etb) {
          if($dataLine[self::LINE_ID] == $etb->etablissement->cvi){
            $etablissementToWrite = $etb->etablissement;
            break;
          }
        }
        if($etablissementToWrite){
          echo "traitement ".$etablissementToWrite->_id." ";
          return $this->importAdresse($dataLine,$etablissementToWrite);
        }else{
          echo "/!\ Etablissement non trouvé pour ".$societe->_id." \n";
        }
      }
    }

    protected function importAdresse($dataLine,$etb){
      if($dataLine[self::LINE_INTITULE]){
        $etb->setNom($dataLine[self::LINE_INTITULE]);
      }
      $masterCompte = $etb->getSociete()->getMasterCompte();
      if(  ( strtoupper(trim($masterCompte->getCommune())) == strtoupper(trim($dataLine[self::LINE_COMMUNE])) )
        && ( strtoupper(trim($masterCompte->getCodePostal())) ==  strtoupper(trim($dataLine[self::LINE_CODEPOSTAL])) )
        && ( ( strtoupper(trim($masterCompte->getAdresse())) ==  strtoupper(trim($dataLine[self::LINE_ADRESSE])) )  ||
              (trim($masterCompte->getAdresse()) && !trim($dataLine[self::LINE_ADRESSE])) ) )
         {
          echo "pas de nouvelle adresse : ".$dataLine[self::LINE_ADRESSE]." ".$dataLine[self::LINE_CODEPOSTAL]." ".$dataLine[self::LINE_COMMUNE]." n'est pas assez précise\n";
          return;
        }
      $etb->setAdresse($dataLine[self::LINE_ADRESSE]);
      $etb->setCommune($dataLine[self::LINE_COMMUNE]);
      $etb->setCodePostal($dataLine[self::LINE_CODEPOSTAL]);
      $etb->save();
      echo "nouvelle adresse : ".$dataLine[self::LINE_ADRESSE]." ".$dataLine[self::LINE_CODEPOSTAL]." ".$dataLine[self::LINE_COMMUNE]."\n";
    }
}
